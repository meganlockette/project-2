/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _this = this;
import * as tslib_1 from "tslib";
import { picker } from './picker';
import * as filestack from './../index';
var mockPickerOpen = jest.fn(function () { return Promise.resolve(); });
var mockPickerCrop = jest.fn(function () { return Promise.resolve(); });
var mockPickerClose = jest.fn(function () { return Promise.resolve(); });
var mockPickerCancel = jest.fn(function () { return Promise.resolve(); });
jest.mock('filestack-loader', function () {
    return {
        loadModule: jest.fn(function () {
            return new Promise(function (resolve) {
                resolve(jest.fn().mockImplementation(function () {
                    return {
                        open: mockPickerOpen,
                        crop: mockPickerCrop,
                        close: mockPickerClose,
                        cancel: mockPickerCancel,
                    };
                }));
            });
        }),
        knownModuleIds: {
            picker: '__filestack-picker-module',
        },
    };
});
var pickerInstance;
var client;
describe('picker', function () {
    beforeAll(function () {
        var defaultApikey = 'DEFAULT_API_KEY';
        client = filestack.init(defaultApikey);
    });
    beforeEach(function () {
        pickerInstance = picker(client, {});
    });
    it('should properly open picker', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.open()];
                case 1:
                    _a.sent();
                    expect(mockPickerOpen).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly crop picker', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var files;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    files = ['file1.txt', 'file2.txt'];
                    return [4 /*yield*/, pickerInstance.crop(files)];
                case 1:
                    _a.sent();
                    expect.assertions(2);
                    expect(mockPickerCrop).toHaveBeenCalledTimes(1);
                    expect(mockPickerCrop).toHaveBeenCalledWith(files);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly close picker', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.close()];
                case 1:
                    _a.sent();
                    expect(mockPickerClose).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly cancel picker', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.cancel()];
                case 1:
                    _a.sent();
                    expect(mockPickerCancel).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should not throw error on correct params', function () {
        return expect(function () { return picker(client, {
            onOpen: function () {
                console.log(123);
            },
            customText: {
                Upload: 'customUpload',
            },
            uploadConfig: {
                partSize: 6 * 1024 * 1024,
            },
            storeTo: {
                container: 'test',
            },
        }); }).not.toThrowError('Invalid picker params');
    });
    it('should throw error on invalid options', function () {
        return expect(function () { return picker(client, {
            // @ts-ignore
            onOpen: 'test',
            customText: {
                Upload: 'customUpload',
                // @ts-ignore
                asd: {},
            },
        }); }).toThrowError('Invalid picker params');
    });
});
