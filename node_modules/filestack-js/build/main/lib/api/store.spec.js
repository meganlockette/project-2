"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var store_1 = require("./store");
var filelink_1 = require("./../filelink");
var nock = require("nock");
var testHost = 'https://test.com';
var testUrl = 'testurl';
var mockGet = jest.fn().mockName('mockGet');
var mockHandle = 'mockHandle';
jest.mock('./../filelink');
var mockedSession = {
    apikey: 'fakeApikey',
    urls: {
        cdnUrl: testHost,
        fileApiUrl: 'fakeApiUrl',
        uploadApiUrl: 'fakeUploadApiUrl',
        cloudApiUrl: 'fakeCloudApiUrl',
        pickerUrl: 'fakePickerUrl',
    },
};
var responseObj = {
    filename: 'testFilename',
    handle: 'testHandle',
    url: 'testUrl',
    type: 'testMimetype',
    mimetype: 'testMimetype',
    size: 1,
};
describe('StoreURL', function () {
    beforeAll(function () {
        spyOn(filelink_1.Filelink.prototype, 'toString').and.returnValue(testHost + "/" + testUrl);
        mockGet.mockReturnValue(responseObj);
        nock(testHost)
            .persist()
            .get("/" + testUrl)
            .reply(200, mockGet);
    });
    it('should call correct store method', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, store_1.storeURL(mockedSession, 'http://test.com')];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual(responseObj);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should respect passed security and policy', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var fakeSecurity, res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeSecurity = {
                        signature: 'fakeS',
                        policy: 'fakeP',
                    };
                    return [4 /*yield*/, store_1.storeURL(mockedSession, mockHandle, {}, null, fakeSecurity)];
                case 1:
                    res = _a.sent();
                    expect(filelink_1.Filelink.prototype.security).toBeCalledWith(fakeSecurity);
                    expect(res).toEqual(responseObj);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw error on wrong store params', function () {
        expect(function () { return store_1.storeURL(mockedSession, mockHandle, {
            // @ts-ignore
            test: 123,
        }); }).toThrowError('Invalid store params');
    });
    it('should respect token cancel', function () {
        var token = {
            cancel: function () { return jest.fn(); },
        };
        setImmediate(function () { return token.cancel(); });
        return expect(store_1.storeURL(mockedSession, mockHandle, {}, token)).rejects.toEqual({});
    });
    it('should throw an error when missing url', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            expect(function () { return store_1.storeURL(mockedSession); }).toThrowError();
            return [2 /*return*/];
        });
    }); });
    it('should rejects on request error', function () {
        // @ts-ignore
        filelink_1.Filelink.prototype.toString.and.returnValue(testHost + "/" + testUrl + "/404");
        nock(testHost)
            .get("/" + testUrl + "/404")
            .reply(404);
        return expect(store_1.storeURL(mockedSession, mockHandle, {})).rejects.toEqual(expect.any(Error));
    });
    it('should rejects on wrong body structure', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            // @ts-ignore
            filelink_1.Filelink.prototype.toString.and.returnValue(testHost + "/" + testUrl + "/body");
            mockGet.mockReturnValue({
                test: 123,
            });
            nock(testHost)
                .get("/" + testUrl + "/body")
                .reply(200, mockGet);
            return [2 /*return*/, expect(store_1.storeURL(mockedSession, mockHandle, {})).rejects.toEqual(expect.any(Error))];
        });
    }); });
});
